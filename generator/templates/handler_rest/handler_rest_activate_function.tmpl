// @Summary Activate {{ .EntityNameUpperSpace }}
// @Description Activate {{ .EntityNameUpperSpace }}
// @Security BearerAuth
// @Tags Admin
// @Param id path integer true "{{ .EntityNameLowerSpace }} id"
// @Produce json
// @Success 200 {object} entity.HTTPResp{data=entity.{{ .EntityNameUpper }}{}}
// @Failure 500 {object} entity.HTTPResp{}
// @Failure 401 {object} entity.HTTPResp{}
// @Failure 404 {object} entity.HTTPResp{}
// @Router /v1/admin/{{ .EntityNameLowerDash }}/{id}/activate [PATCH]
func (r *rest) Activate{{ .EntityNameUpper }}(ctx *gin.Context) {
	var param entity.{{ .EntityNameUpper }}Param

	defer func() {
		r.LogEvent(ctx, audit.Collection{
			EventName:        entity.{{ .EntityNameUpper }}Activate,
			EventDescription: "activate {{ .EntityNameLowerSpace }}",
			RequestBody:      param,
		})
	}()

	if err := r.BindParams(ctx, &param); err != nil {
		r.httpRespError(ctx, errors.NewWithCode(codes.CodeInvalidValue, err.Error()))
		return
	}

	err := r.uc.{{ .EntityNameUpper }}.Activate(ctx.Request.Context(), param)
	if err != nil {
		r.httpRespError(ctx, err)
		return
	}

	r.httpRespSuccess(ctx, codes.CodeSuccess, nil, nil)
}
