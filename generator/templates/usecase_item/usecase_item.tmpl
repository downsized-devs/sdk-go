package {{ .EntityNameSnakeCase }}

import (
	"context"
	"fmt"
	"time"

	{{ .EntityName }}Dom "github.com/downsized-devs/generic-service/src/business/domain/{{ .EntityNameSnakeCase }}"
	"github.com/downsized-devs/generic-service/src/business/entity"
	"github.com/downsized-devs/sdk-go/auth"
	"github.com/downsized-devs/sdk-go/loggerger"
	"github.com/downsized-devs/sdk-go/null"
)

type Interface interface {
	
}

type {{ .EntityName }} struct {
	log         logger.Interface
	{{ .EntityName }} {{ .EntityName }}Dom.Interface
	auth        auth.Interface
}

type InitParam struct {
	Log  logger.Interface
	Dom   {{ .EntityName }}Dom.Interface
	Auth auth.Interface
}

func Init(params InitParam) Interface {
	uc := &{{ .EntityName }}{
		{{ .EntityName }}: params.Dom,
		log:         params.Log,
		auth:        params.Auth,
	}
	return uc
}

var Now = time.Now
