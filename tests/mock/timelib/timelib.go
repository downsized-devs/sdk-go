// Code generated by MockGen. DO NOT EDIT.
// Source: ./timelib/timelib.go
//
// Generated by this command:
//
//	mockgen -source ./timelib/timelib.go -destination ./tests/mock/timelib/timelib.go
//

// Package mock_timelib is a generated GoMock package.
package mock_timelib

import (
	reflect "reflect"
	time "time"

	timelib "github.com/downsized-devs/sdk-go/timelib"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AddTime mocks base method.
func (m *MockInterface) AddTime(origin time.Time, adder time.Duration) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTime", origin, adder)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// AddTime indicates an expected call of AddTime.
func (mr *MockInterfaceMockRecorder) AddTime(origin, adder any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTime", reflect.TypeOf((*MockInterface)(nil).AddTime), origin, adder)
}

// ConvertFromString mocks base method.
func (m *MockInterface) ConvertFromString(timeFormat, timeString string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertFromString", timeFormat, timeString)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertFromString indicates an expected call of ConvertFromString.
func (mr *MockInterfaceMockRecorder) ConvertFromString(timeFormat, timeString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertFromString", reflect.TypeOf((*MockInterface)(nil).ConvertFromString), timeFormat, timeString)
}

// ConvertToString mocks base method.
func (m *MockInterface) ConvertToString(timeFormat string, timeParam time.Time) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToString", timeFormat, timeParam)
	ret0, _ := ret[0].(string)
	return ret0
}

// ConvertToString indicates an expected call of ConvertToString.
func (mr *MockInterfaceMockRecorder) ConvertToString(timeFormat, timeParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToString", reflect.TypeOf((*MockInterface)(nil).ConvertToString), timeFormat, timeParam)
}

// GetCurrentTime mocks base method.
func (m *MockInterface) GetCurrentTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCurrentTime indicates an expected call of GetCurrentTime.
func (mr *MockInterfaceMockRecorder) GetCurrentTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentTime", reflect.TypeOf((*MockInterface)(nil).GetCurrentTime))
}

// GetFirstDayOfTheMonth mocks base method.
func (m *MockInterface) GetFirstDayOfTheMonth(year int, month time.Month) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstDayOfTheMonth", year, month)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetFirstDayOfTheMonth indicates an expected call of GetFirstDayOfTheMonth.
func (mr *MockInterfaceMockRecorder) GetFirstDayOfTheMonth(year, month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstDayOfTheMonth", reflect.TypeOf((*MockInterface)(nil).GetFirstDayOfTheMonth), year, month)
}

// GetLastDayOfTheMonth mocks base method.
func (m *MockInterface) GetLastDayOfTheMonth(year int, month time.Month) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastDayOfTheMonth", year, month)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastDayOfTheMonth indicates an expected call of GetLastDayOfTheMonth.
func (mr *MockInterfaceMockRecorder) GetLastDayOfTheMonth(year, month any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastDayOfTheMonth", reflect.TypeOf((*MockInterface)(nil).GetLastDayOfTheMonth), year, month)
}

// GetTimeInLocation mocks base method.
func (m *MockInterface) GetTimeInLocation(locationParam timelib.Location, timeParam time.Time) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeInLocation", locationParam, timeParam)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeInLocation indicates an expected call of GetTimeInLocation.
func (mr *MockInterfaceMockRecorder) GetTimeInLocation(locationParam, timeParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeInLocation", reflect.TypeOf((*MockInterface)(nil).GetTimeInLocation), locationParam, timeParam)
}

// SubstractTime mocks base method.
func (m *MockInterface) SubstractTime(origin, deductor time.Time) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubstractTime", origin, deductor)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// SubstractTime indicates an expected call of SubstractTime.
func (mr *MockInterfaceMockRecorder) SubstractTime(origin, deductor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubstractTime", reflect.TypeOf((*MockInterface)(nil).SubstractTime), origin, deductor)
}
