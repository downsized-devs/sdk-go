// Code generated by MockGen. DO NOT EDIT.
// Source: ./tracker/tracker.go
//
// Generated by this command:
//
//	mockgen -source ./tracker/tracker.go -destination ./tests/mock/tracker/tracker.go
//

// Package mock_tracker is a generated GoMock package.
package mock_tracker

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Push mocks base method.
func (m *MockInterface) Push(ctx context.Context, trackingName string, labels map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", ctx, trackingName, labels)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockInterfaceMockRecorder) Push(ctx, trackingName, labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockInterface)(nil).Push), ctx, trackingName, labels)
}

// PushWebhook mocks base method.
func (m *MockInterface) PushWebhook(ctx context.Context, payload []byte, headers map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushWebhook", ctx, payload, headers)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushWebhook indicates an expected call of PushWebhook.
func (mr *MockInterfaceMockRecorder) PushWebhook(ctx, payload, headers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushWebhook", reflect.TypeOf((*MockInterface)(nil).PushWebhook), ctx, payload, headers)
}
