// Code generated by MockGen. DO NOT EDIT.
// Source: ./log/log.go
//
// Generated by this command:
//
//	mockgen -source ./log/log.go -destination ./tests/mock/log/log.go
//

// Package mock_log is a generated GoMock package.
package mock_log

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockInterface) Debug(ctx context.Context, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", ctx, obj)
}

// Debug indicates an expected call of Debug.
func (mr *MockInterfaceMockRecorder) Debug(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockInterface)(nil).Debug), ctx, obj)
}

// Error mocks base method.
func (m *MockInterface) Error(ctx context.Context, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", ctx, obj)
}

// Error indicates an expected call of Error.
func (mr *MockInterfaceMockRecorder) Error(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockInterface)(nil).Error), ctx, obj)
}

// Fatal mocks base method.
func (m *MockInterface) Fatal(ctx context.Context, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", ctx, obj)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockInterfaceMockRecorder) Fatal(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockInterface)(nil).Fatal), ctx, obj)
}

// Info mocks base method.
func (m *MockInterface) Info(ctx context.Context, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", ctx, obj)
}

// Info indicates an expected call of Info.
func (mr *MockInterfaceMockRecorder) Info(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockInterface)(nil).Info), ctx, obj)
}

// Panic mocks base method.
func (m *MockInterface) Panic(obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Panic", obj)
}

// Panic indicates an expected call of Panic.
func (mr *MockInterfaceMockRecorder) Panic(obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockInterface)(nil).Panic), obj)
}

// Trace mocks base method.
func (m *MockInterface) Trace(ctx context.Context, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Trace", ctx, obj)
}

// Trace indicates an expected call of Trace.
func (mr *MockInterfaceMockRecorder) Trace(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockInterface)(nil).Trace), ctx, obj)
}

// Warn mocks base method.
func (m *MockInterface) Warn(ctx context.Context, obj any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", ctx, obj)
}

// Warn indicates an expected call of Warn.
func (mr *MockInterfaceMockRecorder) Warn(ctx, obj any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockInterface)(nil).Warn), ctx, obj)
}
