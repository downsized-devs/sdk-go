// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage/storage.go
//
// Generated by this command:
//
//	mockgen -source ./storage/storage.go -destination ./tests/mock/storage/storage.go
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// CreateUrlByKey mocks base method.
func (m *MockInterface) CreateUrlByKey(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUrlByKey", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateUrlByKey indicates an expected call of CreateUrlByKey.
func (mr *MockInterfaceMockRecorder) CreateUrlByKey(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUrlByKey", reflect.TypeOf((*MockInterface)(nil).CreateUrlByKey), key)
}

// Delete mocks base method.
func (m *MockInterface) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInterfaceMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterface)(nil).Delete), ctx, key)
}

// Download mocks base method.
func (m *MockInterface) Download(ctx context.Context, url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockInterfaceMockRecorder) Download(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockInterface)(nil).Download), ctx, url)
}

// GetPresignedUrl mocks base method.
func (m *MockInterface) GetPresignedUrl(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedUrl", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedUrl indicates an expected call of GetPresignedUrl.
func (mr *MockInterfaceMockRecorder) GetPresignedUrl(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedUrl", reflect.TypeOf((*MockInterface)(nil).GetPresignedUrl), ctx, key)
}

// GetPresignedUrlWithDuration mocks base method.
func (m *MockInterface) GetPresignedUrlWithDuration(ctx context.Context, key string, presignedDuration time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresignedUrlWithDuration", ctx, key, presignedDuration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresignedUrlWithDuration indicates an expected call of GetPresignedUrlWithDuration.
func (mr *MockInterfaceMockRecorder) GetPresignedUrlWithDuration(ctx, key, presignedDuration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresignedUrlWithDuration", reflect.TypeOf((*MockInterface)(nil).GetPresignedUrlWithDuration), ctx, key, presignedDuration)
}

// Upload mocks base method.
func (m *MockInterface) Upload(ctx context.Context, key, filename, filemimetype string, data []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, key, filename, filemimetype, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockInterfaceMockRecorder) Upload(ctx, key, filename, filemimetype, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockInterface)(nil).Upload), ctx, key, filename, filemimetype, data)
}
