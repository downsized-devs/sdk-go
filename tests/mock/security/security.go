// Code generated by MockGen. DO NOT EDIT.
// Source: ./security/security.go
//
// Generated by this command:
//
//	mockgen -source ./security/security.go -destination ./tests/mock/security/security.go
//

// Package mock_security is a generated GoMock package.
package mock_security

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// CompareHashPassword mocks base method.
func (m *MockInterface) CompareHashPassword(ctx context.Context, secretKey, hashPassword, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashPassword", ctx, secretKey, hashPassword, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CompareHashPassword indicates an expected call of CompareHashPassword.
func (mr *MockInterfaceMockRecorder) CompareHashPassword(ctx, secretKey, hashPassword, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashPassword", reflect.TypeOf((*MockInterface)(nil).CompareHashPassword), ctx, secretKey, hashPassword, password)
}

// CompareScryptPassword mocks base method.
func (m *MockInterface) CompareScryptPassword(ctx context.Context, passwordHash, salt, password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareScryptPassword", ctx, passwordHash, salt, password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CompareScryptPassword indicates an expected call of CompareScryptPassword.
func (mr *MockInterfaceMockRecorder) CompareScryptPassword(ctx, passwordHash, salt, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareScryptPassword", reflect.TypeOf((*MockInterface)(nil).CompareScryptPassword), ctx, passwordHash, salt, password)
}

// Decrypt mocks base method.
func (m *MockInterface) Decrypt(ctx context.Context, passphrase string, timestamp int64, ciphertext string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ctx, passphrase, timestamp, ciphertext)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockInterfaceMockRecorder) Decrypt(ctx, passphrase, timestamp, ciphertext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockInterface)(nil).Decrypt), ctx, passphrase, timestamp, ciphertext)
}

// Encrypt mocks base method.
func (m *MockInterface) Encrypt(ctx context.Context, passphrase string, timestamp int64, plaintext string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", ctx, passphrase, timestamp, plaintext)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockInterfaceMockRecorder) Encrypt(ctx, passphrase, timestamp, plaintext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockInterface)(nil).Encrypt), ctx, passphrase, timestamp, plaintext)
}

// HashPassword mocks base method.
func (m *MockInterface) HashPassword(ctx context.Context, secretKey, password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", ctx, secretKey, password)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockInterfaceMockRecorder) HashPassword(ctx, secretKey, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockInterface)(nil).HashPassword), ctx, secretKey, password)
}

// ScryptPassword mocks base method.
func (m *MockInterface) ScryptPassword(ctx context.Context, salt, password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScryptPassword", ctx, salt, password)
	ret0, _ := ret[0].(string)
	return ret0
}

// ScryptPassword indicates an expected call of ScryptPassword.
func (mr *MockInterfaceMockRecorder) ScryptPassword(ctx, salt, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScryptPassword", reflect.TypeOf((*MockInterface)(nil).ScryptPassword), ctx, salt, password)
}
