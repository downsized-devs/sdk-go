// Code generated by MockGen. DO NOT EDIT.
// Source: ./sql/sql_cmd.go
//
// Generated by this command:
//
//	mockgen -source ./sql/sql_cmd.go -destination ./tests/mock/sql/sql_cmd.go
//

// Package mock_sql is a generated GoMock package.
package mock_sql

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	sql0 "github.com/downsized-devs/sdk-go/sql"
	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockCommand) BeginTx(ctx context.Context, name string, opts sql0.TxOptions) (sql0.CommandTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, name, opts)
	ret0, _ := ret[0].(sql0.CommandTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockCommandMockRecorder) BeginTx(ctx, name, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockCommand)(nil).BeginTx), ctx, name, opts)
}

// Close mocks base method.
func (m *MockCommand) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCommandMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCommand)(nil).Close))
}

// Exec mocks base method.
func (m *MockCommand) Exec(ctx context.Context, name, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockCommandMockRecorder) Exec(ctx, name, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockCommand)(nil).Exec), varargs...)
}

// Get mocks base method.
func (m *MockCommand) Get(ctx context.Context, name, query string, dest any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, query, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCommandMockRecorder) Get(ctx, name, query, dest any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, query, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommand)(nil).Get), varargs...)
}

// In mocks base method.
func (m *MockCommand) In(query string, args ...any) (string, []any, error) {
	m.ctrl.T.Helper()
	varargs := []any{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "In", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]any)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// In indicates an expected call of In.
func (mr *MockCommandMockRecorder) In(query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "In", reflect.TypeOf((*MockCommand)(nil).In), varargs...)
}

// NamedExec mocks base method.
func (m *MockCommand) NamedExec(ctx context.Context, name, query string, args any) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedExec", ctx, name, query, args)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedExec indicates an expected call of NamedExec.
func (mr *MockCommandMockRecorder) NamedExec(ctx, name, query, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedExec", reflect.TypeOf((*MockCommand)(nil).NamedExec), ctx, name, query, args)
}

// NamedQuery mocks base method.
func (m *MockCommand) NamedQuery(ctx context.Context, name, query string, arg any) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamedQuery", ctx, name, query, arg)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedQuery indicates an expected call of NamedQuery.
func (mr *MockCommandMockRecorder) NamedQuery(ctx, name, query, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedQuery", reflect.TypeOf((*MockCommand)(nil).NamedQuery), ctx, name, query, arg)
}

// Ping mocks base method.
func (m *MockCommand) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockCommandMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCommand)(nil).Ping), ctx)
}

// Prepare mocks base method.
func (m *MockCommand) Prepare(ctx context.Context, name, query string) (sql0.CommandStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx, name, query)
	ret0, _ := ret[0].(sql0.CommandStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockCommandMockRecorder) Prepare(ctx, name, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockCommand)(nil).Prepare), ctx, name, query)
}

// Query mocks base method.
func (m *MockCommand) Query(ctx context.Context, name, query string, args ...any) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockCommandMockRecorder) Query(ctx, name, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCommand)(nil).Query), varargs...)
}

// QueryIn mocks base method.
func (m *MockCommand) QueryIn(ctx context.Context, name, query string, args ...any) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryIn", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryIn indicates an expected call of QueryIn.
func (mr *MockCommandMockRecorder) QueryIn(ctx, name, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryIn", reflect.TypeOf((*MockCommand)(nil).QueryIn), varargs...)
}

// QueryRow mocks base method.
func (m *MockCommand) QueryRow(ctx context.Context, name, query string, args ...any) (*sqlx.Row, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockCommandMockRecorder) QueryRow(ctx, name, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockCommand)(nil).QueryRow), varargs...)
}

// Rebind mocks base method.
func (m *MockCommand) Rebind(query string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebind", query)
	ret0, _ := ret[0].(string)
	return ret0
}

// Rebind indicates an expected call of Rebind.
func (mr *MockCommandMockRecorder) Rebind(query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebind", reflect.TypeOf((*MockCommand)(nil).Rebind), query)
}
