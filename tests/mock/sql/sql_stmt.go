// Code generated by MockGen. DO NOT EDIT.
// Source: ./sql/sql_stmt.go
//
// Generated by this command:
//
//	mockgen -source ./sql/sql_stmt.go -destination ./tests/mock/sql/sql_stmt.go
//

// Package mock_sql is a generated GoMock package.
package mock_sql

import (
	sql "database/sql"
	reflect "reflect"

	sqlx "github.com/jmoiron/sqlx"
	gomock "go.uber.org/mock/gomock"
)

// MockCommandStmt is a mock of CommandStmt interface.
type MockCommandStmt struct {
	ctrl     *gomock.Controller
	recorder *MockCommandStmtMockRecorder
}

// MockCommandStmtMockRecorder is the mock recorder for MockCommandStmt.
type MockCommandStmtMockRecorder struct {
	mock *MockCommandStmt
}

// NewMockCommandStmt creates a new mock instance.
func NewMockCommandStmt(ctrl *gomock.Controller) *MockCommandStmt {
	mock := &MockCommandStmt{ctrl: ctrl}
	mock.recorder = &MockCommandStmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandStmt) EXPECT() *MockCommandStmtMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCommandStmt) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCommandStmtMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCommandStmt)(nil).Close))
}

// Exec mocks base method.
func (m *MockCommandStmt) Exec(name string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockCommandStmtMockRecorder) Exec(name any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockCommandStmt)(nil).Exec), varargs...)
}

// Get mocks base method.
func (m *MockCommandStmt) Get(name string, dest any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{name, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockCommandStmtMockRecorder) Get(name, dest any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommandStmt)(nil).Get), varargs...)
}

// Query mocks base method.
func (m *MockCommandStmt) Query(name string, args ...any) (*sqlx.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sqlx.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockCommandStmtMockRecorder) Query(name any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCommandStmt)(nil).Query), varargs...)
}

// QueryRow mocks base method.
func (m *MockCommandStmt) QueryRow(name string, args ...any) (*sqlx.Row, error) {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sqlx.Row)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockCommandStmtMockRecorder) QueryRow(name any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockCommandStmt)(nil).QueryRow), varargs...)
}

// Select mocks base method.
func (m *MockCommandStmt) Select(name string, dest any, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{name, dest}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockCommandStmtMockRecorder) Select(name, dest any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name, dest}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockCommandStmt)(nil).Select), varargs...)
}
