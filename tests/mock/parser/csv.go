// Code generated by MockGen. DO NOT EDIT.
// Source: ./parser/csv.go
//
// Generated by this command:
//
//	mockgen -source ./parser/csv.go -destination ./tests/mock/parser/csv.go
//

// Package mock_parser is a generated GoMock package.
package mock_parser

import (
	reflect "reflect"

	parser "github.com/downsized-devs/sdk-go/parser"
	gomock "go.uber.org/mock/gomock"
)

// MockCSVInterface is a mock of CSVInterface interface.
type MockCSVInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCSVInterfaceMockRecorder
}

// MockCSVInterfaceMockRecorder is the mock recorder for MockCSVInterface.
type MockCSVInterfaceMockRecorder struct {
	mock *MockCSVInterface
}

// NewMockCSVInterface creates a new mock instance.
func NewMockCSVInterface(ctrl *gomock.Controller) *MockCSVInterface {
	mock := &MockCSVInterface{ctrl: ctrl}
	mock.recorder = &MockCSVInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCSVInterface) EXPECT() *MockCSVInterfaceMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *MockCSVInterface) Marshal(orig any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", orig)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal.
func (mr *MockCSVInterfaceMockRecorder) Marshal(orig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockCSVInterface)(nil).Marshal), orig)
}

// MarshalWithoutHeaders mocks base method.
func (m *MockCSVInterface) MarshalWithoutHeaders(orig any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalWithoutHeaders", orig)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalWithoutHeaders indicates an expected call of MarshalWithoutHeaders.
func (mr *MockCSVInterfaceMockRecorder) MarshalWithoutHeaders(orig any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalWithoutHeaders", reflect.TypeOf((*MockCSVInterface)(nil).MarshalWithoutHeaders), orig)
}

// SetOptionsRead mocks base method.
func (m *MockCSVInterface) SetOptionsRead(opt parser.CSVOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOptionsRead", opt)
}

// SetOptionsRead indicates an expected call of SetOptionsRead.
func (mr *MockCSVInterfaceMockRecorder) SetOptionsRead(opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOptionsRead", reflect.TypeOf((*MockCSVInterface)(nil).SetOptionsRead), opt)
}

// SetOptionsWrite mocks base method.
func (m *MockCSVInterface) SetOptionsWrite(opt parser.CSVOptions) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOptionsWrite", opt)
}

// SetOptionsWrite indicates an expected call of SetOptionsWrite.
func (mr *MockCSVInterfaceMockRecorder) SetOptionsWrite(opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOptionsWrite", reflect.TypeOf((*MockCSVInterface)(nil).SetOptionsWrite), opt)
}

// Unmarshal mocks base method.
func (m *MockCSVInterface) Unmarshal(blob []byte, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", blob, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockCSVInterfaceMockRecorder) Unmarshal(blob, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockCSVInterface)(nil).Unmarshal), blob, dest)
}
