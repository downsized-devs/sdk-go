// Code generated by MockGen. DO NOT EDIT.
// Source: ./parser/excel.go
//
// Generated by this command:
//
//	mockgen -source ./parser/excel.go -destination ./tests/mock/parser/excel.go
//

// Package mock_parser is a generated GoMock package.
package mock_parser

import (
	context "context"
	io "io"
	reflect "reflect"

	parser "github.com/downsized-devs/sdk-go/parser"
	gomock "go.uber.org/mock/gomock"
)

// MockExcelInterface is a mock of ExcelInterface interface.
type MockExcelInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExcelInterfaceMockRecorder
}

// MockExcelInterfaceMockRecorder is the mock recorder for MockExcelInterface.
type MockExcelInterfaceMockRecorder struct {
	mock *MockExcelInterface
}

// NewMockExcelInterface creates a new mock instance.
func NewMockExcelInterface(ctrl *gomock.Controller) *MockExcelInterface {
	mock := &MockExcelInterface{ctrl: ctrl}
	mock.recorder = &MockExcelInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExcelInterface) EXPECT() *MockExcelInterfaceMockRecorder {
	return m.recorder
}

// InjectValue mocks base method.
func (m *MockExcelInterface) InjectValue(ctx context.Context, blob []byte, sheetName string, values map[string]any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InjectValue", ctx, blob, sheetName, values)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InjectValue indicates an expected call of InjectValue.
func (mr *MockExcelInterfaceMockRecorder) InjectValue(ctx, blob, sheetName, values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InjectValue", reflect.TypeOf((*MockExcelInterface)(nil).InjectValue), ctx, blob, sheetName, values)
}

// Marshal mocks base method.
func (m *MockExcelInterface) Marshal(ctx context.Context, input []parser.ExcelInput, pathToFile string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", ctx, input, pathToFile)
	ret0, _ := ret[0].(error)
	return ret0
}

// Marshal indicates an expected call of Marshal.
func (mr *MockExcelInterfaceMockRecorder) Marshal(ctx, input, pathToFile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockExcelInterface)(nil).Marshal), ctx, input, pathToFile)
}

// Unmarshal mocks base method.
func (m *MockExcelInterface) Unmarshal(ctx context.Context, blob []byte) ([]map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", ctx, blob)
	ret0, _ := ret[0].([]map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockExcelInterfaceMockRecorder) Unmarshal(ctx, blob any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockExcelInterface)(nil).Unmarshal), ctx, blob)
}

// UnmarshalTransform mocks base method.
func (m *MockExcelInterface) UnmarshalTransform(ctx context.Context, blob []byte, t parser.Transformer) (parser.ExcelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalTransform", ctx, blob, t)
	ret0, _ := ret[0].(parser.ExcelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalTransform indicates an expected call of UnmarshalTransform.
func (mr *MockExcelInterfaceMockRecorder) UnmarshalTransform(ctx, blob, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalTransform", reflect.TypeOf((*MockExcelInterface)(nil).UnmarshalTransform), ctx, blob, t)
}

// UnmarshalTransformMultipleSheet mocks base method.
func (m *MockExcelInterface) UnmarshalTransformMultipleSheet(ctx context.Context, blob []byte, opt parser.ExcelOption) (map[string]parser.ExcelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalTransformMultipleSheet", ctx, blob, opt)
	ret0, _ := ret[0].(map[string]parser.ExcelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalTransformMultipleSheet indicates an expected call of UnmarshalTransformMultipleSheet.
func (mr *MockExcelInterfaceMockRecorder) UnmarshalTransformMultipleSheet(ctx, blob, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalTransformMultipleSheet", reflect.TypeOf((*MockExcelInterface)(nil).UnmarshalTransformMultipleSheet), ctx, blob, opt)
}

// UnmarshalTransformMultipleSheetV2 mocks base method.
func (m *MockExcelInterface) UnmarshalTransformMultipleSheetV2(ctx context.Context, blob []byte, opt parser.ExcelOption) (map[string]parser.ExcelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalTransformMultipleSheetV2", ctx, blob, opt)
	ret0, _ := ret[0].(map[string]parser.ExcelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalTransformMultipleSheetV2 indicates an expected call of UnmarshalTransformMultipleSheetV2.
func (mr *MockExcelInterfaceMockRecorder) UnmarshalTransformMultipleSheetV2(ctx, blob, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalTransformMultipleSheetV2", reflect.TypeOf((*MockExcelInterface)(nil).UnmarshalTransformMultipleSheetV2), ctx, blob, opt)
}

// UnmarshalTransformV2 mocks base method.
func (m *MockExcelInterface) UnmarshalTransformV2(ctx context.Context, blob []byte, t parser.Transformer) (parser.ExcelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalTransformV2", ctx, blob, t)
	ret0, _ := ret[0].(parser.ExcelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalTransformV2 indicates an expected call of UnmarshalTransformV2.
func (mr *MockExcelInterfaceMockRecorder) UnmarshalTransformV2(ctx, blob, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalTransformV2", reflect.TypeOf((*MockExcelInterface)(nil).UnmarshalTransformV2), ctx, blob, t)
}

// UnmarshalTransformYAxis mocks base method.
func (m *MockExcelInterface) UnmarshalTransformYAxis(ctx context.Context, blob []byte, t parser.Transformer) (parser.ExcelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalTransformYAxis", ctx, blob, t)
	ret0, _ := ret[0].(parser.ExcelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalTransformYAxis indicates an expected call of UnmarshalTransformYAxis.
func (mr *MockExcelInterfaceMockRecorder) UnmarshalTransformYAxis(ctx, blob, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalTransformYAxis", reflect.TypeOf((*MockExcelInterface)(nil).UnmarshalTransformYAxis), ctx, blob, t)
}

// UnmarshalWithAxis mocks base method.
func (m *MockExcelInterface) UnmarshalWithAxis(ctx context.Context, blob []byte, t parser.Transformer) (parser.ExcelResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalWithAxis", ctx, blob, t)
	ret0, _ := ret[0].(parser.ExcelResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalWithAxis indicates an expected call of UnmarshalWithAxis.
func (mr *MockExcelInterfaceMockRecorder) UnmarshalWithAxis(ctx, blob, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalWithAxis", reflect.TypeOf((*MockExcelInterface)(nil).UnmarshalWithAxis), ctx, blob, t)
}

// Validate mocks base method.
func (m *MockExcelInterface) Validate(ctx context.Context, blob []byte, t parser.Transformer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, blob, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockExcelInterfaceMockRecorder) Validate(ctx, blob, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockExcelInterface)(nil).Validate), ctx, blob, t)
}

// WriteReader mocks base method.
func (m *MockExcelInterface) WriteReader(ctx context.Context, blob []byte, ioReader io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteReader", ctx, blob, ioReader)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteReader indicates an expected call of WriteReader.
func (mr *MockExcelInterfaceMockRecorder) WriteReader(ctx, blob, ioReader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteReader", reflect.TypeOf((*MockExcelInterface)(nil).WriteReader), ctx, blob, ioReader)
}
