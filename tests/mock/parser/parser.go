// Code generated by MockGen. DO NOT EDIT.
// Source: ./parser/parser.go
//
// Generated by this command:
//
//	mockgen -source ./parser/parser.go -destination ./tests/mock/parser/parser.go
//

// Package mock_parser is a generated GoMock package.
package mock_parser

import (
	reflect "reflect"

	parser "github.com/downsized-devs/sdk-go/parser"
	gomock "go.uber.org/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// CsvParser mocks base method.
func (m *MockParser) CsvParser() parser.CsvInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CsvParser")
	ret0, _ := ret[0].(parser.CsvInterface)
	return ret0
}

// CsvParser indicates an expected call of CsvParser.
func (mr *MockParserMockRecorder) CsvParser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CsvParser", reflect.TypeOf((*MockParser)(nil).CsvParser))
}

// ExcelParser mocks base method.
func (m *MockParser) ExcelParser() parser.ExcelInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExcelParser")
	ret0, _ := ret[0].(parser.ExcelInterface)
	return ret0
}

// ExcelParser indicates an expected call of ExcelParser.
func (mr *MockParserMockRecorder) ExcelParser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcelParser", reflect.TypeOf((*MockParser)(nil).ExcelParser))
}

// JsonParser mocks base method.
func (m *MockParser) JsonParser() parser.JsonInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JsonParser")
	ret0, _ := ret[0].(parser.JsonInterface)
	return ret0
}

// JsonParser indicates an expected call of JsonParser.
func (mr *MockParserMockRecorder) JsonParser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JsonParser", reflect.TypeOf((*MockParser)(nil).JsonParser))
}
