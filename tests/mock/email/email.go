// Code generated by MockGen. DO NOT EDIT.
// Source: ./email/email.go
//
// Generated by this command:
//
//	mockgen -source ./email/email.go -destination ./tests/mock/email/email.go
//

// Package mock_email is a generated GoMock package.
package mock_email

import (
	context "context"
	reflect "reflect"

	email "github.com/downsized-devs/sdk-go/email"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GenerateBody mocks base method.
func (m *MockInterface) GenerateBody() email.TemplateInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBody")
	ret0, _ := ret[0].(email.TemplateInterface)
	return ret0
}

// GenerateBody indicates an expected call of GenerateBody.
func (mr *MockInterfaceMockRecorder) GenerateBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBody", reflect.TypeOf((*MockInterface)(nil).GenerateBody))
}

// SendEmail mocks base method.
func (m *MockInterface) SendEmail(ctx context.Context, params email.SendEmailParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockInterfaceMockRecorder) SendEmail(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockInterface)(nil).SendEmail), ctx, params)
}
