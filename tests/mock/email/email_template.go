// Code generated by MockGen. DO NOT EDIT.
// Source: ./email/email_template.go
//
// Generated by this command:
//
//	mockgen -source ./email/email_template.go -destination ./tests/mock/email/email_template.go
//

// Package mock_email is a generated GoMock package.
package mock_email

import (
	context "context"
	reflect "reflect"

	email "github.com/downsized-devs/sdk-go/email"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplateInterface is a mock of TemplateInterface interface.
type MockTemplateInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateInterfaceMockRecorder
}

// MockTemplateInterfaceMockRecorder is the mock recorder for MockTemplateInterface.
type MockTemplateInterfaceMockRecorder struct {
	mock *MockTemplateInterface
}

// NewMockTemplateInterface creates a new mock instance.
func NewMockTemplateInterface(ctrl *gomock.Controller) *MockTemplateInterface {
	mock := &MockTemplateInterface{ctrl: ctrl}
	mock.recorder = &MockTemplateInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateInterface) EXPECT() *MockTemplateInterfaceMockRecorder {
	return m.recorder
}

// FromHTML mocks base method.
func (m *MockTemplateInterface) FromHTML(params email.BodyFromHTMLParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromHTML", params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromHTML indicates an expected call of FromHTML.
func (mr *MockTemplateInterfaceMockRecorder) FromHTML(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromHTML", reflect.TypeOf((*MockTemplateInterface)(nil).FromHTML), params)
}

// FromMJML mocks base method.
func (m *MockTemplateInterface) FromMJML(ctx context.Context, params email.BodyFromMJMLParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromMJML", ctx, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromMJML indicates an expected call of FromMJML.
func (mr *MockTemplateInterfaceMockRecorder) FromMJML(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromMJML", reflect.TypeOf((*MockTemplateInterface)(nil).FromMJML), ctx, params)
}
