// Code generated by MockGen. DO NOT EDIT.
// Source: ./pdf/pdf.go
//
// Generated by this command:
//
//	mockgen -source ./pdf/pdf.go -destination ./tests/mock/pdf/pdf.go
//

// Package mock_pdf is a generated GoMock package.
package mock_pdf

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPdfInterface is a mock of PdfInterface interface.
type MockPdfInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPdfInterfaceMockRecorder
}

// MockPdfInterfaceMockRecorder is the mock recorder for MockPdfInterface.
type MockPdfInterfaceMockRecorder struct {
	mock *MockPdfInterface
}

// NewMockPdfInterface creates a new mock instance.
func NewMockPdfInterface(ctrl *gomock.Controller) *MockPdfInterface {
	mock := &MockPdfInterface{ctrl: ctrl}
	mock.recorder = &MockPdfInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPdfInterface) EXPECT() *MockPdfInterfaceMockRecorder {
	return m.recorder
}

// SetPasswordFile mocks base method.
func (m *MockPdfInterface) SetPasswordFile(ctx context.Context, password string, data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPasswordFile", ctx, password, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetPasswordFile indicates an expected call of SetPasswordFile.
func (mr *MockPdfInterfaceMockRecorder) SetPasswordFile(ctx, password, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPasswordFile", reflect.TypeOf((*MockPdfInterface)(nil).SetPasswordFile), ctx, password, data)
}
