// Code generated by MockGen. DO NOT EDIT.
// Source: ./instrument/instrument.go
//
// Generated by this command:
//
//	mockgen -source ./instrument/instrument.go -destination ./tests/mock/instrument/instrument.go
//

// Package mock_instrument is a generated GoMock package.
package mock_instrument

import (
	sql "database/sql"
	http "net/http"
	reflect "reflect"

	prometheus "github.com/prometheus/client_golang/prometheus"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DatabaseQueryTimer mocks base method.
func (m *MockInterface) DatabaseQueryTimer(dbname, conntype, queryname string) *prometheus.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DatabaseQueryTimer", dbname, conntype, queryname)
	ret0, _ := ret[0].(*prometheus.Timer)
	return ret0
}

// DatabaseQueryTimer indicates an expected call of DatabaseQueryTimer.
func (mr *MockInterfaceMockRecorder) DatabaseQueryTimer(dbname, conntype, queryname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DatabaseQueryTimer", reflect.TypeOf((*MockInterface)(nil).DatabaseQueryTimer), dbname, conntype, queryname)
}

// HTTPRequestCounter mocks base method.
func (m *MockInterface) HTTPRequestCounter(path, method string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HTTPRequestCounter", path, method)
}

// HTTPRequestCounter indicates an expected call of HTTPRequestCounter.
func (mr *MockInterfaceMockRecorder) HTTPRequestCounter(path, method any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPRequestCounter", reflect.TypeOf((*MockInterface)(nil).HTTPRequestCounter), path, method)
}

// HTTPRequestTimer mocks base method.
func (m *MockInterface) HTTPRequestTimer(path, method string) *prometheus.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPRequestTimer", path, method)
	ret0, _ := ret[0].(*prometheus.Timer)
	return ret0
}

// HTTPRequestTimer indicates an expected call of HTTPRequestTimer.
func (mr *MockInterfaceMockRecorder) HTTPRequestTimer(path, method any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPRequestTimer", reflect.TypeOf((*MockInterface)(nil).HTTPRequestTimer), path, method)
}

// HTTPResponseStatusCounter mocks base method.
func (m *MockInterface) HTTPResponseStatusCounter(code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HTTPResponseStatusCounter", code)
}

// HTTPResponseStatusCounter indicates an expected call of HTTPResponseStatusCounter.
func (mr *MockInterfaceMockRecorder) HTTPResponseStatusCounter(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPResponseStatusCounter", reflect.TypeOf((*MockInterface)(nil).HTTPResponseStatusCounter), code)
}

// IsEnabled mocks base method.
func (m *MockInterface) IsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockInterfaceMockRecorder) IsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockInterface)(nil).IsEnabled))
}

// MetricsHandler mocks base method.
func (m *MockInterface) MetricsHandler() http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricsHandler")
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// MetricsHandler indicates an expected call of MetricsHandler.
func (mr *MockInterfaceMockRecorder) MetricsHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricsHandler", reflect.TypeOf((*MockInterface)(nil).MetricsHandler))
}

// RegisterDBStats mocks base method.
func (m *MockInterface) RegisterDBStats(db *sql.DB, dbname string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterDBStats", db, dbname)
}

// RegisterDBStats indicates an expected call of RegisterDBStats.
func (mr *MockInterfaceMockRecorder) RegisterDBStats(db, dbname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterDBStats", reflect.TypeOf((*MockInterface)(nil).RegisterDBStats), db, dbname)
}

// SchedulerRunningCounter mocks base method.
func (m *MockInterface) SchedulerRunningCounter(schedulername string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SchedulerRunningCounter", schedulername)
}

// SchedulerRunningCounter indicates an expected call of SchedulerRunningCounter.
func (mr *MockInterfaceMockRecorder) SchedulerRunningCounter(schedulername any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulerRunningCounter", reflect.TypeOf((*MockInterface)(nil).SchedulerRunningCounter), schedulername)
}

// SchedulerRunningTimer mocks base method.
func (m *MockInterface) SchedulerRunningTimer(schedulername string) *prometheus.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SchedulerRunningTimer", schedulername)
	ret0, _ := ret[0].(*prometheus.Timer)
	return ret0
}

// SchedulerRunningTimer indicates an expected call of SchedulerRunningTimer.
func (mr *MockInterfaceMockRecorder) SchedulerRunningTimer(schedulername any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SchedulerRunningTimer", reflect.TypeOf((*MockInterface)(nil).SchedulerRunningTimer), schedulername)
}
